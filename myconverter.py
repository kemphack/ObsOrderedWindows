# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_myconverter')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_myconverter')
    _myconverter = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_myconverter', [dirname(__file__)])
        except ImportError:
            import _myconverter
            return _myconverter
        try:
            _mod = imp.load_module('_myconverter', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _myconverter = swig_import_helper()
    del swig_import_helper
else:
    import _myconverter
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class winrt_exports(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, winrt_exports, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, winrt_exports, name)
    __repr__ = _swig_repr
    __swig_setmethods__["winrt_capture_supported"] = _myconverter.winrt_exports_winrt_capture_supported_set
    __swig_getmethods__["winrt_capture_supported"] = _myconverter.winrt_exports_winrt_capture_supported_get
    if _newclass:
        winrt_capture_supported = _swig_property(_myconverter.winrt_exports_winrt_capture_supported_get, _myconverter.winrt_exports_winrt_capture_supported_set)
    __swig_setmethods__["winrt_capture_cursor_toggle_supported"] = _myconverter.winrt_exports_winrt_capture_cursor_toggle_supported_set
    __swig_getmethods__["winrt_capture_cursor_toggle_supported"] = _myconverter.winrt_exports_winrt_capture_cursor_toggle_supported_get
    if _newclass:
        winrt_capture_cursor_toggle_supported = _swig_property(_myconverter.winrt_exports_winrt_capture_cursor_toggle_supported_get, _myconverter.winrt_exports_winrt_capture_cursor_toggle_supported_set)
    __swig_setmethods__["winrt_capture_init_window"] = _myconverter.winrt_exports_winrt_capture_init_window_set
    __swig_getmethods__["winrt_capture_init_window"] = _myconverter.winrt_exports_winrt_capture_init_window_get
    if _newclass:
        winrt_capture_init_window = _swig_property(_myconverter.winrt_exports_winrt_capture_init_window_get, _myconverter.winrt_exports_winrt_capture_init_window_set)
    __swig_setmethods__["winrt_capture_free"] = _myconverter.winrt_exports_winrt_capture_free_set
    __swig_getmethods__["winrt_capture_free"] = _myconverter.winrt_exports_winrt_capture_free_get
    if _newclass:
        winrt_capture_free = _swig_property(_myconverter.winrt_exports_winrt_capture_free_get, _myconverter.winrt_exports_winrt_capture_free_set)
    __swig_setmethods__["winrt_capture_active"] = _myconverter.winrt_exports_winrt_capture_active_set
    __swig_getmethods__["winrt_capture_active"] = _myconverter.winrt_exports_winrt_capture_active_get
    if _newclass:
        winrt_capture_active = _swig_property(_myconverter.winrt_exports_winrt_capture_active_get, _myconverter.winrt_exports_winrt_capture_active_set)
    __swig_setmethods__["winrt_capture_show_cursor"] = _myconverter.winrt_exports_winrt_capture_show_cursor_set
    __swig_getmethods__["winrt_capture_show_cursor"] = _myconverter.winrt_exports_winrt_capture_show_cursor_get
    if _newclass:
        winrt_capture_show_cursor = _swig_property(_myconverter.winrt_exports_winrt_capture_show_cursor_get, _myconverter.winrt_exports_winrt_capture_show_cursor_set)
    __swig_setmethods__["winrt_capture_render"] = _myconverter.winrt_exports_winrt_capture_render_set
    __swig_getmethods__["winrt_capture_render"] = _myconverter.winrt_exports_winrt_capture_render_get
    if _newclass:
        winrt_capture_render = _swig_property(_myconverter.winrt_exports_winrt_capture_render_get, _myconverter.winrt_exports_winrt_capture_render_set)
    __swig_setmethods__["winrt_capture_width"] = _myconverter.winrt_exports_winrt_capture_width_set
    __swig_getmethods__["winrt_capture_width"] = _myconverter.winrt_exports_winrt_capture_width_get
    if _newclass:
        winrt_capture_width = _swig_property(_myconverter.winrt_exports_winrt_capture_width_get, _myconverter.winrt_exports_winrt_capture_width_set)
    __swig_setmethods__["winrt_capture_height"] = _myconverter.winrt_exports_winrt_capture_height_set
    __swig_getmethods__["winrt_capture_height"] = _myconverter.winrt_exports_winrt_capture_height_get
    if _newclass:
        winrt_capture_height = _swig_property(_myconverter.winrt_exports_winrt_capture_height_get, _myconverter.winrt_exports_winrt_capture_height_set)

    def __init__(self):
        this = _myconverter.new_winrt_exports()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _myconverter.delete_winrt_exports
    __del__ = lambda self: None
winrt_exports_swigregister = _myconverter.winrt_exports_swigregister
winrt_exports_swigregister(winrt_exports)

METHOD_AUTO = _myconverter.METHOD_AUTO
METHOD_BITBLT = _myconverter.METHOD_BITBLT
METHOD_WGC = _myconverter.METHOD_WGC
class window_capture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, window_capture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, window_capture, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _myconverter.window_capture_source_set
    __swig_getmethods__["source"] = _myconverter.window_capture_source_get
    if _newclass:
        source = _swig_property(_myconverter.window_capture_source_get, _myconverter.window_capture_source_set)
    __swig_setmethods__["update_mutex"] = _myconverter.window_capture_update_mutex_set
    __swig_getmethods__["update_mutex"] = _myconverter.window_capture_update_mutex_get
    if _newclass:
        update_mutex = _swig_property(_myconverter.window_capture_update_mutex_get, _myconverter.window_capture_update_mutex_set)
    __swig_setmethods__["title"] = _myconverter.window_capture_title_set
    __swig_getmethods__["title"] = _myconverter.window_capture_title_get
    if _newclass:
        title = _swig_property(_myconverter.window_capture_title_get, _myconverter.window_capture_title_set)
    __swig_setmethods__["_class"] = _myconverter.window_capture__class_set
    __swig_getmethods__["_class"] = _myconverter.window_capture__class_get
    if _newclass:
        _class = _swig_property(_myconverter.window_capture__class_get, _myconverter.window_capture__class_set)
    __swig_setmethods__["executable"] = _myconverter.window_capture_executable_set
    __swig_getmethods__["executable"] = _myconverter.window_capture_executable_get
    if _newclass:
        executable = _swig_property(_myconverter.window_capture_executable_get, _myconverter.window_capture_executable_set)
    __swig_setmethods__["method"] = _myconverter.window_capture_method_set
    __swig_getmethods__["method"] = _myconverter.window_capture_method_get
    if _newclass:
        method = _swig_property(_myconverter.window_capture_method_get, _myconverter.window_capture_method_set)
    __swig_setmethods__["priority"] = _myconverter.window_capture_priority_set
    __swig_getmethods__["priority"] = _myconverter.window_capture_priority_get
    if _newclass:
        priority = _swig_property(_myconverter.window_capture_priority_get, _myconverter.window_capture_priority_set)
    __swig_setmethods__["cursor"] = _myconverter.window_capture_cursor_set
    __swig_getmethods__["cursor"] = _myconverter.window_capture_cursor_get
    if _newclass:
        cursor = _swig_property(_myconverter.window_capture_cursor_get, _myconverter.window_capture_cursor_set)
    __swig_setmethods__["compatibility"] = _myconverter.window_capture_compatibility_set
    __swig_getmethods__["compatibility"] = _myconverter.window_capture_compatibility_get
    if _newclass:
        compatibility = _swig_property(_myconverter.window_capture_compatibility_get, _myconverter.window_capture_compatibility_set)
    __swig_setmethods__["client_area"] = _myconverter.window_capture_client_area_set
    __swig_getmethods__["client_area"] = _myconverter.window_capture_client_area_get
    if _newclass:
        client_area = _swig_property(_myconverter.window_capture_client_area_get, _myconverter.window_capture_client_area_set)
    __swig_setmethods__["use_wildcards"] = _myconverter.window_capture_use_wildcards_set
    __swig_getmethods__["use_wildcards"] = _myconverter.window_capture_use_wildcards_get
    if _newclass:
        use_wildcards = _swig_property(_myconverter.window_capture_use_wildcards_get, _myconverter.window_capture_use_wildcards_set)
    __swig_setmethods__["capture"] = _myconverter.window_capture_capture_set
    __swig_getmethods__["capture"] = _myconverter.window_capture_capture_get
    if _newclass:
        capture = _swig_property(_myconverter.window_capture_capture_get, _myconverter.window_capture_capture_set)
    __swig_setmethods__["wgc_supported"] = _myconverter.window_capture_wgc_supported_set
    __swig_getmethods__["wgc_supported"] = _myconverter.window_capture_wgc_supported_get
    if _newclass:
        wgc_supported = _swig_property(_myconverter.window_capture_wgc_supported_get, _myconverter.window_capture_wgc_supported_set)
    __swig_setmethods__["previously_failed"] = _myconverter.window_capture_previously_failed_set
    __swig_getmethods__["previously_failed"] = _myconverter.window_capture_previously_failed_get
    if _newclass:
        previously_failed = _swig_property(_myconverter.window_capture_previously_failed_get, _myconverter.window_capture_previously_failed_set)
    __swig_setmethods__["winrt_module"] = _myconverter.window_capture_winrt_module_set
    __swig_getmethods__["winrt_module"] = _myconverter.window_capture_winrt_module_get
    if _newclass:
        winrt_module = _swig_property(_myconverter.window_capture_winrt_module_get, _myconverter.window_capture_winrt_module_set)
    __swig_setmethods__["exports"] = _myconverter.window_capture_exports_set
    __swig_getmethods__["exports"] = _myconverter.window_capture_exports_get
    if _newclass:
        exports = _swig_property(_myconverter.window_capture_exports_get, _myconverter.window_capture_exports_set)
    __swig_setmethods__["capture_winrt"] = _myconverter.window_capture_capture_winrt_set
    __swig_getmethods__["capture_winrt"] = _myconverter.window_capture_capture_winrt_get
    if _newclass:
        capture_winrt = _swig_property(_myconverter.window_capture_capture_winrt_get, _myconverter.window_capture_capture_winrt_set)
    __swig_setmethods__["resize_timer"] = _myconverter.window_capture_resize_timer_set
    __swig_getmethods__["resize_timer"] = _myconverter.window_capture_resize_timer_get
    if _newclass:
        resize_timer = _swig_property(_myconverter.window_capture_resize_timer_get, _myconverter.window_capture_resize_timer_set)
    __swig_setmethods__["check_window_timer"] = _myconverter.window_capture_check_window_timer_set
    __swig_getmethods__["check_window_timer"] = _myconverter.window_capture_check_window_timer_get
    if _newclass:
        check_window_timer = _swig_property(_myconverter.window_capture_check_window_timer_get, _myconverter.window_capture_check_window_timer_set)
    __swig_setmethods__["cursor_check_time"] = _myconverter.window_capture_cursor_check_time_set
    __swig_getmethods__["cursor_check_time"] = _myconverter.window_capture_cursor_check_time_get
    if _newclass:
        cursor_check_time = _swig_property(_myconverter.window_capture_cursor_check_time_get, _myconverter.window_capture_cursor_check_time_set)
    __swig_setmethods__["window"] = _myconverter.window_capture_window_set
    __swig_getmethods__["window"] = _myconverter.window_capture_window_get
    if _newclass:
        window = _swig_property(_myconverter.window_capture_window_get, _myconverter.window_capture_window_set)
    __swig_setmethods__["last_rect"] = _myconverter.window_capture_last_rect_set
    __swig_getmethods__["last_rect"] = _myconverter.window_capture_last_rect_get
    if _newclass:
        last_rect = _swig_property(_myconverter.window_capture_last_rect_get, _myconverter.window_capture_last_rect_set)

    def __init__(self):
        this = _myconverter.new_window_capture()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _myconverter.delete_window_capture
    __del__ = lambda self: None
window_capture_swigregister = _myconverter.window_capture_swigregister
window_capture_swigregister(window_capture)


def void_to_rect(ptr: 'void *') -> "long":
    return _myconverter.void_to_rect(ptr)
void_to_rect = _myconverter.void_to_rect

def void_to_window(ptr: 'void *') -> "long":
    return _myconverter.void_to_window(ptr)
void_to_window = _myconverter.void_to_window
# This file is compatible with both classic and new-style classes.


